# .gitHub/workflows/docker-image.yml
name: Build and Push Docker Image

# master 브랜치에 push 가 될 때 이 Workflow 가 트리거 됨
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드르 체크아웃 (가져옴)
      - name: Checkout code
        uses: actions/checkout@v4

      # 프로젝트를 build 해야 하기 때문에 알맞은 jdk 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          # 해당 프로젝트가 zulu jdk17 사용하고 있기 때문에 zulu 선택
          distribution: 'zulu'
          check-latest: false

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # build 명령어 실행하여 .jar 파일 만들어 줌
      - name: Build with Gradle
        run: ./gradlew build

      # 2. Docker hub 로그인
      - name: Log in to Docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 버전 변수 설정 (분 단위로 고정된 버전)
      - name: Set version
        id: set_version
        run: echo "VERSION=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      # 3. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t yawning5/ec2study:$VERSION .

      # 4. Docker 이미지 푸시
      - name: Push Docker image
        run: |
          docker push yawning5/ec2study:$VERSION

      # 5. CD SSH를 통해 EC2에 접속 및 컨테이너 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 이걸 넣으니까 해결 됐음 git hub 환경 변수에 설정한 VERSION 을 ec2 환경에 넘겨줘야함
            VERSION=${{ env.VERSION }}
            
            # EC2 내에서 동일한 버전 사용
            echo "Using version: $VERSION"
            
            # 버전이 비어 있는지 확인
            if [ -z "$VERSION" ]; then
              echo "Error: VERSION is not set" >&2
              exit 1
            fi

            docker pull yawning5/ec2study:$VERSION

            # 'ec2study_$VERSION' 이름을 가진 컨테이너가 있으면 중지 및 삭제
            if [ "$(docker ps -a -q -f name=ec2study_$VERSION)" ]; then
              echo "Stopping and removing existing container 'ec2study_$VERSION'"
              docker stop ec2study_$VERSION || true
              docker rm ec2study_$VERSION || true
            fi

            # 새로운 버전의 컨테이너 실행
            echo "Running new container"
            docker stop ec2study
            docker rm ec2study
            docker run --name ec2study -d -p 8080:8080 yawning5/ec2study:$VERSION || echo "Error: Failed to run container"